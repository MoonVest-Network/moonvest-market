type Collection @model @auth(rules: [{allow: public}]) 
  @key(fields: ["blockChain", "collectionID"]) 
  @key(name: "collectionByAddress", fields: ["blockChain", "address"], queryField: "collectionByAddress")
{
  blockChain: String!
  collectionID: Int!
  address: String
  name: String
  description: String
}

type Nft @model @auth(rules: [{allow: public}]) 
  @key(fields: ["collectionID", "tokenID"])  
{
  collectionID: Int!
  tokenID: Int!
  tokenIndex: Int
  name: String
  description: String
  image: String
  url: String
  properties: AWSJSON
  likes: Int
  popularity: Int 
  ownerAddress: String
  creatorAddress: String
}

type Transfer @model @auth(rules: [{allow: public}]) 
  @key(fields: ["blockNumber", "logIndex"])  
  @key(name: "transfersByToken", fields: ["collectionID", "tokenID"], queryField: "transfersByToken")
  @key(name: "transfersBySender", fields: ["fromAddress"], queryField: "transfersBySender")
  @key(name: "transfersByReciever", fields: ["toAddress"], queryField: "transfersByReciever")
{
  blockNumber: Int!
  logIndex: Int!
  transactionHash: String!
  collectionID: Int!
  tokenID: Int!
  fromAddress: String
  toAddress: String
}

type Marketplace @model @auth(rules: [{allow: public}]) @key(name: "popularity", fields: ["likes", "popularity"], queryField: "popularity") {
  id: ID!
  collectionAddress: String
  name: String
  description: String
  image: String
  likes: Int
  popularity: Float
  url: String
  properties: AWSJSON
  walletAddress: String
  collectionID: Int
  tokenID: Int
  tokenIndex: Int
  ownerAddress: String
  creatorAddress: String
}
 