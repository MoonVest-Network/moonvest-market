type Collection @model @auth(rules: [{allow: public}]) 
  @key(fields: ["blockchain", "collectionID"]) 
  @key(name: "collectionByAddress", fields: ["blockchain", "address"], queryField: "collectionByAddress")
{
  blockchain: String!
  collectionID: Int!
  address: String
  name: String
  description: String
}

type Nft @model @auth(rules: [{allow: public}]) 
  @key(fields: ["collectionID", "tokenID"])  
  @key(name: "nftsByCreationBlock", fields: ["creationBlock"], queryField: "nftsByCreationBlock")
  @key(name: "nftsByOwner", fields: ["ownerAddress"], queryField: "nftsByOwner")
  @key(name: "nftsByCreator", fields: ["creatorAddress"], queryField: "nftsByCreator")
  @key(name: "nftsByPopularity", fields: ["popularity"], queryField: "nftsByPopularity")
  @key(name: "nftsByKeywords", fields: ["keywords"], queryField: "nftsByKeywords")
{
  collectionID: Int!
  tokenID: String!
  tokenIndex: Int
  name: String
  description: String
  image: String
  url: String
  properties: AWSJSON
  likes: Int
  popularity: Int 
  ownerAddress: String
  creatorAddress: String
  keywords: String
  creationBlock: Int
  lastTransferBlock: Int
}

type Transfer @model @auth(rules: [{allow: public}]) 
  @key(fields: ["blockNumber", "logIndex"])  
  @key(name: "transfersByToken", fields: ["collectionID", "tokenID"], queryField: "transfersByToken")
  @key(name: "transfersBySender", fields: ["fromAddress"], queryField: "transfersBySender")
  @key(name: "transfersByReciever", fields: ["toAddress"], queryField: "transfersByReciever")
{
  blockNumber: String!
  logIndex: Int!
  transactionHash: String!
  collectionID: Int!
  tokenID: String!
  fromAddress: String
  toAddress: String
}

type Wallet @model @auth(rules: [{allow: public}]) 
  @key(fields: ["address"])  
{
  address: String!
  name: String
  description: String
  popularity: Int
  bnbBalance: Float
  ethBalance: Float
  mvnBalance: Float
}

type Like @model @auth(rules: [{allow: public}]) 
  @key(fields: ["address", "collectionID", "tokenID"])  
{
  address: String!
  collectionID: Int!
  tokenID: String!
}

type Follow @model @auth(rules: [{allow: public}]) 
  @key(fields: ["followerAddress", "targetAddress"])  
  @key(name: "followers", fields: ["targetAddress"], queryField: "followers")
{
  followerAddress: String!
  targetAddress: String!
}

type Marketplace @model @auth(rules: [{allow: public}]) @key(name: "popularity", fields: ["likes", "popularity"], queryField: "popularity") {
  id: ID!
  collectionAddress: String
  name: String
  description: String
  image: String
  likes: Int
  popularity: Float
  url: String
  properties: AWSJSON
  walletAddress: String
  collectionID: Int
  tokenID: Int
  tokenIndex: Int
  ownerAddress: String
  creatorAddress: String
}
 